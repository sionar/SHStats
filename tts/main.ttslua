------------------Constants
VERSION = '0.3.0'
DEBUG = false
COLORS = {'White', 'Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Pink', 'Teal', 'Brown'}
START_POS = {['Secret Hitler: CE'] = {x = 100, y = 1.1, z = 8}, ['Secret Hitler: 55'] = {x = 0, y = 1.1, z = 70}}


------------------Variables
gameState = {
  gameType = 'vanilla',
  isStarted = false,
  isRecorded = false,
  sessionPlayers = {},
  numPlayers = 0,
  startTime = 0,
  winningTeam = '',
  winType = '',
  hostId = '',
  hostName = '',
  gameId = ''
}
leaderboard = {}
overallStats = {}
stats = {}
statsSettings = {
  view = 'main',
  numPlayers = 0,
  gameType = 'vanilla',
  dateRange = 'Any',
  offset = 1,
  minGames = 0,
  isLatestVersion = true,
  lookupFound = false,
  lookupId = nil,
  lookupName = '',
  lookupStats = {}
}

------------------Events
function onLoad(saveString)
  if not (saveString == '') then
    local save = JSON.decode(saveString)
    gameState = save['gs'] or gameState
    statsSettings = save['ss'] or statsSettings
  end
  gameState.isRecorded = false
  gameState.startTime = os.time()
  updatePlayers()
  moveBoard()
  updateHost()
  checkStarted()
  checkVersion()
  getStats()
  self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function onSave()
  local save = {}
  save['gs'] = gameState
  save['ss'] = statsSettings
  local saveString = JSON.encode(save)
  return saveString
end

function onPlayerChangeColor(playerColor)
  if not gameState.isStarted then
    Timer.destroy('playerChangeColor')
    Timer.create({identifier='playerChangeColor', function_name='updatePlayers', delay=5})
  end
end

------------------onLoad Functions
function updatePlayers()
  local nextGameState = {}
  for k,v in pairs(gameState) do
    nextGameState[k] = gameState[k]
  end
  local entry = {}
  local roles = {}
  local sessionPlayers = {}
  local globalName = Global.getVar('MOD_NAME')
  if globalName == 'Secret Hitler: CE' or globalName == 'Secret Hitler: 55'  then
    roles = Global.getTable('roles')
    nextGameState.isStarted = Global.getVar('started')
  end
  local players = nil
  if not nextGameState.isStarted then
    players = getSeatedPlayers()
  else
    players = Global.getTable('players')
  end
  if players ~= nil then
    for k,v in pairs(players) do
      sessionPlayers[v] = {steam_id = Player[v].steam_id, role = roles[v] or '', steam_name = Player[v].steam_name}
    end
  end
  nextGameState.numPlayers = #players
  nextGameState.sessionPlayers = sessionPlayers
  gameState = nextGameState
  getStats()
  broadcastToAll("Seated players updated", stringColorToRGB("Blue"))
end

function moveBoard()
  local globalName = Global.getVar('MOD_NAME')
  if globalName == 'Secret Hitler: CE' or globalName == 'Secret Hitler: 55' then
    local allObjs = getAllObjects()
    local numFound = 0
    for k,v in pairs(allObjs) do
      if v.getName() == 'Secret Hitler Scoreboard' then
        numFound = numFound + 1
      end
    end
    local xOffset = (numFound - 1) * 30
    self.setPositionSmooth({START_POS[globalName].x + xOffset, START_POS[globalName].y, START_POS[globalName].z})
    self.setLock(true)
  end
end

function updateHost()
  local allPlayers = Player.getPlayers()
  for i,v in ipairs(allPlayers) do
    if v.host then
      gameState.hostId = v.steam_id
      gameState.hostName = v.steam_name
      return
    end
  end
end

function checkStarted()
  Wait.time(checkStartedTimer, 5)
end

function checkStartedTimer()
  local isStarted = Global.getVar('started')
  if isStarted then
    gameState.isStarted = true
    updatePlayers()
  else
    checkStarted()
  end
end

function checkReset()
  Wait.time(checkResetTimer, 2)
end

function checkResetTimer()
  local isStarted = Global.getVar('started')
  if not isStarted and gameState.isRecorded then
    gameState.isRecorded = false
    gameState.isStarted = false
    gameState.startTime = os.time()
    gameState.gameId = ''
    checkStarted()
  else
    checkReset()
  end
end

------------------Main Functions
function toggleGameType()
  if gameState.gameType == 'vanilla' then
    gameState.gameType = 'expansion'
    statsSettings.gameType = 'expansion'
  else
    gameState.gameType = 'vanilla'
    statsSettings.gameType = 'vanilla'
  end
  sendRequest()
end

function toggleNumPlayers()
  if statsSettings.numPlayers < 10 and statsSettings.numPlayers >= 5 then
    statsSettings.numPlayers = statsSettings.numPlayers + 1
  elseif statsSettings.numPlayers == 10 then
    statsSettings.numPlayers = 0
  elseif statsSettings.numPlayers == 0 then
    statsSettings.numPlayers = 5
  end
  sendRequest()
end

function toggleDateRange()
  if statsSettings.dateRange == 'Any' then
    statsSettings.dateRange = '1w'
  elseif statsSettings.dateRange == '1w' then
    statsSettings.dateRange = '1m'
  elseif statsSettings.dateRange == '1m' then
    statsSettings.dateRange = '3m'
  elseif statsSettings.dateRange == '3m' then
    statsSettings.dateRange = '6m'
  elseif statsSettings.dateRange == '6m' then
    statsSettings.dateRange = '1y'
  elseif statsSettings.dateRange == '1y' then
    statsSettings.dateRange = 'Any'
  end
  sendRequest()
end

function isRecordable()
  local currTime = os.time()
  if not gameState.isStarted then
    broadcastToAll('Error recording game: Game not started.', {1,0,0})
    return false
  elseif gameState.numPlayers < 5 then
    broadcastToAll('Error recording game: Not enough players seated', {1,0,0})
    return false
  elseif currTime - gameState.startTime < 30 then
    broadcastToAll('Error recording game: You are trying to record a game too soon.', {1,0,0})
    return false
  elseif not statsSettings.isLatestVersion then
    broadcastToAll('Error recording game: There is a newer version of the Scoreboard available.', {1,0,0})
  else
    return true
  end
end

function recordGame()
  if not isRecordable() then return end

  if not gameState.isRecorded then
    gameState.isRecorded = true
    postGame()
    checkReset()
  else
    updateGameResults()
  end
  renderView()
end

function sendRequest()
  if statsSettings.view == 'main' then
    getStats()
  elseif statsSettings.view == 'misc' then
    getOverallStats()
  elseif statsSettings.view == 'leaderAll' then
    getLeaderboard('total_wr')
  elseif statsSettings.view == 'leaderLib' then
    getLeaderboard('liberal_wr')
  elseif statsSettings.view == 'leaderFas' then
    getLeaderboard('fascist_wr')
  elseif statsSettings.view == 'lookup' then
    lookupPlayer()
  end
end
