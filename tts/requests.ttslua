baseUrl = 'https://shstats.herokuapp.com/api/'

function generateQuery()
  local query = 'get_stats?game_type=' .. statsSettings.gameType .. '&num_players=' .. statsSettings.numPlayers .. '&'
  local i = 0
  for k,v in pairs(gameState.sessionPlayers) do
    if v.steam_id and v.steam_name then
      query = query .. 'steam_id' .. i .. '=' .. v.steam_id .. '&' .. 'steam_name' .. i .. '=' .. v.steam_name .. '&'
    end
    i = i+1
  end
  return query
end

function getStats()
  local query = generateQuery()
  local endpoint = baseUrl .. query
  WebRequest.get(endpoint, getStatsCb)
end

function getStatsCb(request)
  if request.is_done then
    if (request.response_code) == 500 then
      broadcastToAll('Stats could not be fetched.', {1,0,0})
      return
    end
    response = JSON.decode(request.text)
    stats = response.users
    renderView()
  end
end

function getOverallStats()
  local query = 'games?game_type=' .. statsSettings.gameType .. '&num_players=' .. statsSettings.numPlayers
  local endpoint = baseUrl .. query
  WebRequest.get(endpoint, getOverallStatsCb)
end

function getOverallStatsCb(request)
  if request.is_done then
    if (request.response_code) == 500 then
      broadcastToAll('Stats could not be fetched.', {1,0,0})
      return
    end
    response = JSON.decode(request.text)
    overallStats = response.stats
    renderView()
  end
end

function getLeaderboard(sort_by)
  local query = 'users?game_type=' .. statsSettings.gameType .. '&num_players=' .. statsSettings.numPlayers .. '&sort_by=' .. sort_by
  local endpoint = baseUrl .. query
  WebRequest.get(endpoint, getLeaderboardCb)
end

function getLeaderboardCb(request)
  if request.is_done then
    if (request.response_code) == 500 then
      broadcastToAll('Stats could not be fetched.', {1,0,0})
      return
    end
    response = JSON.decode(request.text)
    leaderboard = {}
    for i,v in ipairs(response.users) do
      table.insert(leaderboard, v)
    end
    renderView()
  end
end

function lookupPlayer()
  local steamIdStr = statsSettings.lookupId and statsSettings.lookupId ~='' and 'steam_id=' .. statsSettings.lookupId .. '&' or ''
  local steamNameStr = statsSettings.lookupName and statsSettings.lookupName ~= '' and 'steam_name=' .. statsSettings.lookupName .. '&' or ''
  local query = 'search?game_type=' .. statsSettings.gameType .. '&num_players=' .. statsSettings.numPlayers .. '&'.. steamIdStr .. steamNameStr
  local endpoint = baseUrl .. query
  WebRequest.get(endpoint, lookupCb)
end

function lookupCb(request)
  if request.is_done then
    if (request.response_code) == 500 then
      statsSettings.lookupFound = false
      broadcastToAll('Stats could not be fetched.', {1,0,0})
      renderView()
      return
    end
    if (request.response_code) == 404 then
      statsSettings.lookupFound = false
      broadcastToAll('User not found.', {1,0,0})
      renderView()
      return
    end
    if (request.response_code) == 400 then
      statsSettings.lookupFound = false
      broadcastToAll('At least one input field must be filled in.', {1,0,0})
      renderView()
      return
    end

    response = JSON.decode(request.text)
    local users = response.users
    for k,v in pairs(users) do
      statsSettings.lookupStats = v
    end
    statsSettings.lookupFound = true
    renderView()
  end
end

function postGame(playerColor)
  local player = Player[playerColor]
  local endpoint = baseUrl .. 'games'
  local form = {
    game_type = gameState.gameType,
    submitter_id = player.steam_id,
    submitter_name = player.steam_name,
    winning_team = gameState.winningTeam,
    win_type = gameState.winType,
  }
  local i = 0
  for k,v in pairs(gameState.sessionPlayers) do
    form['steam_id'..(i)] = tostring(v.steam_id)
    form['steam_name'..(i)] = tostring(v.steam_name)
    form['role'..(i)] = (v.role)
    i = i+1
  end
  form.num_players = i
  WebRequest.post(endpoint, form, postGameCb)
end

function postGameCb(request)
  if request.is_done then
    if (request.response_code) == 500 then
      broadcastToAll('Stats could not be recorded.', {1,0,0})
      gameState.isRecorded = false
      return
    end
    getStats()
  end
end
