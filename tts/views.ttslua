------------------Views
function renderView()
  viewFunctions = {
    main = renderMainView,
    misc = renderMiscView,
    leaderAll = renderLeaderboardView,
    leaderLib = renderLeaderboardView,
    leaderFas = renderLeaderboardView
  }

  self.clearInputs()
  self.clearButtons()
  viewFunctions[statsSettings.view]()
  renderButtonPanel()
end

function renderButtonPanel()
  if statsSettings.view == 'main' then
    renderButtonPanelMain()
  else
    renderButtonPanelOther()
  end
end

function floatAsPercentage(value)
  return math.floor(value * 100) .. '%'
end

function renderButtonPanelMain()
  local buttonParam = {}
  if gameState.gameType == 'vanilla' then
      buttonParam = {click_function = 'handleChangeGameType', label = "Game Type:\nVanilla", color = {246/255,218/255,136/255}, font_color = stringColorToRGB('Black'), function_owner = self,
          position = {-1.6,0.2,1.6}, width = 1000, height = 800, font_size = 180, tooltip = 'Current game mode is set to vanilla', scale = {0.25,0.25,0.25}}
  else
      buttonParam = {click_function = 'handleChangeGameType', label = "Game Type:\nExpansion", color = {91/255,37/255,206/255}, font_color = stringColorToRGB('White'), function_owner = self,
          position = {-1.6,0.2,1.6}, width = 1000, height = 800, font_size = 180, tooltip = 'Current game mode is set to expansion', scale = {0.25,0.25,0.25}}
  end
  self.createButton(buttonParam)

  local gameSizeText = 'Any'
  if statsSettings.numPlayers ~= 0 then
      gameSizeText = statsSettings.numPlayers
  end
  buttonParam = {click_function = 'handleChangeNumPlayers', label = "Num Players:\n"..gameSizeText, color = {91/255,37/255,206/255}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {-0.96,0.2,1.6}, width = 1000, height = 800, font_size = 150, tooltip = 'Set which game size to show stats for.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleUpdatePlayers', label = "Update\nPlayers", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
      position = {-0.32,0.2,1.6}, width = 1000, height = 800, font_size = 200, scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToMisc', label = "Misc\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
      position = {0.32,0.2,1.6}, width = 1000, height = 800, font_size = 200, scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleRecordLibWinPolicy', label = "Record Lib\nPolicy Win", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {0.96,0.2,1.5}, width = 1000, height = 400, font_size = 100, tooltip = 'Record a liberal win by policy.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleRecordLibWinHitler', label = "Record Lib\nHitler Win", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {0.96,0.2,1.7}, width = 1000, height = 400, font_size = 100, tooltip = 'Record a liberal win by shooting Hitler.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleRecordFasWinPolicy', label = "Record Fas\nPolicy Win", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {1.6,0.2,1.5}, width = 1000, height = 400, font_size = 100, tooltip = 'Record a fascist win by policy.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleRecordFasWinHitler', label = "Record Fas\nHitler Win", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {1.6,0.2,1.7}, width = 1000, height = 400, font_size = 100, tooltip = 'Record a Hitler win - Hitler was elected as chancellor in Hitler territory. (!rh)', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)
end

function renderButtonPanelOther()
  local buttonParam = {}
  if gameState.gameType == 'vanilla' then
      buttonParam = {click_function = 'handleChangeGameType', label = "Game Type:\nVanilla", color = {246/255,218/255,136/255}, font_color = stringColorToRGB('Black'), function_owner = self,
          position = {-1.6,0.2,1.6}, width = 1000, height = 800, font_size = 180, tooltip = 'Current game mode is set to vanilla', scale = {0.25,0.25,0.25}}
  else
      buttonParam = {click_function = 'handleChangeGameType', label = "Game Type:\nExpansion", color = {91/255,37/255,206/255}, font_color = stringColorToRGB('White'), function_owner = self,
          position = {-1.6,0.2,1.6}, width = 1000, height = 800, font_size = 180, tooltip = 'Current game mode is set to expansion', scale = {0.25,0.25,0.25}}
  end
  self.createButton(buttonParam)

  local gameSizeText = 'Any'
  if statsSettings.numPlayers ~= 0 then
      gameSizeText = statsSettings.numPlayers
  end
  buttonParam = {click_function = 'handleChangeNumPlayers', label = "Num Players:\n"..gameSizeText, color = {91/255,37/255,206/255}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {-0.96,0.2,1.6}, width = 1000, height = 800, font_size = 150, tooltip = 'Set which game size to show stats for.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToMain', label = "Main\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
      position = {-0.32,0.2,1.6}, width = 1000, height = 800, font_size = 200, scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToMisc', label = "Misc\nStats", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
      position = {0.32,0.2,1.6}, width = 1000, height = 800, font_size = 200, scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToLeaderAll', label = "Overall\nLeaderboard", color = {0.5,0,0.75,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {0.96,0.2,1.5}, width = 1000, height = 400, font_size = 100, tooltip = 'Show the overall leaderboard.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToLeaderLib', label = "Liberal\nLeaderboard", color = {0,0,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {0.96,0.2,1.7}, width = 1000, height = 400, font_size = 100, tooltip = 'Show the liberal leaderboard.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToLeaderFas', label = "Fascist\nLeaderboard", color = {1,0,0,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {1.6,0.2,1.5}, width = 1000, height = 400, font_size = 100, tooltip = 'Show the fascist leaderboard.', scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)

  buttonParam = {click_function = 'handleChangeViewToLookup', label = "Lookup\nPlayer", color = {0,1,0.25,1}, font_color = stringColorToRGB('White'), function_owner = self,
      position = {1.6,0.2,1.7}, width = 1000, height = 400, font_size = 100, tooltip = "Lookup a player's stats", scale = {0.25,0.25,0.25}}
  self.createButton(buttonParam)
end

function renderMainView()
  renderMainTableHeader()
  renderMainTableRows()
end

function renderMainTableHeader()
  local labels = {'Name', 'Games Played', 'Total\nWinrate', 'Lib\nWinrate', 'Fas+H\nWinrate', 'Fas\nWinrate', 'Hitler\nWinrate'}
  local xStart = -1.5
  local xInc = 0.5
  local yStart = -1.3
  local buttonParam = {}
  for i,v in ipairs(labels) do
    buttonParam = {click_function = 'nullFunc', label = labels[i], color = {0,0,0}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {xStart + (i-1) * xInc,0.2,yStart}, width = 0, height = 0, font_size = 140, scale = {0.25,0.25,0.25}}
    self.createButton(buttonParam)
  end
end

function renderMainTableRows()
  for i,color in ipairs(COLORS) do
    renderMainTableRow(i, color)
  end
end

function renderMainTableRow(index, color)
  local xStart = -1.5
  local xInc = 0.5
  local yStart = -1
  local yInc = 0.2
  local buttonParam = {}
  local playerStats = stats[Player[color].steam_id]
  if not playerStats then
    return
  end
  local labels = {
    playerStats.steam_name,
    playerStats.total_games,
    floatAsPercentage(playerStats.total_wins/playerStats.total_games),
    floatAsPercentage(playerStats.liberal_wins/playerStats.liberal_games),
    floatAsPercentage((playerStats.fascist_wins + playerStats.hitler_wins)/(playerStats.fascist_games + playerStats.hitler_games)),
    floatAsPercentage(playerStats.fascist_wins/playerStats.fascist_games),
    floatAsPercentage(playerStats.hitler_wins/playerStats.hitler_games),
  }
  local buttonParam = {}
  for i,v in ipairs(labels) do
    buttonParam = {click_function = 'nullFunc', label = labels[i], color = {0,0,0}, font_color = stringColorToRGB(color), function_owner = self,
        position = {xStart + (i-1) * xInc,0.2, yStart + (index-1) * yInc}, width = 0, height = 0, font_size = 140, scale = {0.25,0.25,0.25}}
    self.createButton(buttonParam)
  end
end

function renderMiscView()
  local i = 0
  local zInc = 0.4
  local zStart = -1.4
  for k,group in pairs(overallStats) do
    renderMiscRow(group, zStart + zInc * i)
    i = i+1
  end
end

function renderMiscRow(group, zVal)
  local zSpacing = 0.75
  local categoryLabel = (group.num_players == "any") and "Any number of players:" or group.num_players .. " players:"
  local statLabels = {"Total Games", "Liberal Winrate", "%Liberal Wins by Policy", "Fascist Winrate", "%Fascist Wins by Policy"}
  local valueLabels = {
    group.total_games,
    floatAsPercentage(group.liberal_wins/group.total_games),
    floatAsPercentage(group.liberal_wins_policy/group.liberal_wins),
    floatAsPercentage(1 - group.liberal_wins/group.total_games),
    floatAsPercentage(group.fascist_wins_policy/(group.total_games - group.liberal_wins)),
  }
  local colors = {"Purple", "Blue", "Blue", "Red", "Red"}

  self.createButton({click_function = 'nullFunc', label = categoryLabel, color = {0,0,0}, font_color = stringColorToRGB("White"), function_owner = self,
      position = {0, 0.2, zVal}, width = 0, height = 0, font_size = 160, scale = {0.25,0.25,0.25}})
  for i=1,5 do
    self.createButton({click_function = 'nullFunc', label = statLabels[i], color = {0,0,0}, font_color = stringColorToRGB(colors[i]), function_owner = self,
        position = {zSpacing * (i-3), 0.2, zVal + 0.1}, width = 0, height = 0, font_size = 100, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'nullFunc', label = valueLabels[i], color = {0,0,0}, font_color = stringColorToRGB(colors[i]), function_owner = self,
        position = {zSpacing * (i-3), 0.2, zVal + 0.2}, width = 0, height = 0, font_size = 100, scale = {0.25,0.25,0.25}})
  end

end

function renderLeaderboardView()
  local labelColors = {leaderAll = "Purple", leaderLib = "Blue", leaderFas = "Red"}
  local titleText = {leaderAll = "Overall Leaderboard", leaderLib = "Liberal Leaderboard", leaderFas = "Fascist Leaderboard"}
  local xInc = 1.2
  local xVal = {-1 * xInc, 0, xInc}
  local zStart = -1.2
  local zInc = 0.2
  local tableLabels = {"Player", "Total Games", "Winrate"}
  local startIdx = statsSettings.offset
  local endIdx = startIdx + 9 <= #leaderboard and startIdx + 9 or #leaderboard

  self.createButton({click_function = 'nullFunc', label = titleText[statsSettings.view], color = {0,0,0}, font_color = stringColorToRGB(labelColors[statsSettings.view]), function_owner = self,
      position = {0, 0.2, -1.7}, width = 0, height = 0, font_size = 180, scale = {0.25,0.25,0.25}})
  for i=1,3 do
    self.createButton({click_function = 'nullFunc', label = tableLabels[i], color = {0,0,0}, font_color = stringColorToRGB("White"), function_owner = self,
        position = {xVal[i], 0.2, -1.5}, width = 0, height = 0, font_size = 180, scale = {0.25,0.25,0.25}})
  end


  for idx=startIdx, endIdx do
    renderLeaderboardRow(idx, xVal, zStart + (idx-startIdx) * zInc)
  end
  renderLeaderboardOffsetButtons()
end

function renderLeaderboardRow(idx, xVal, zVal)
  for k,v in pairs(leaderboard[idx]) do
    local key = k
    local stats = v
    local playerLabel = idx .. ". " .. stats.steam_name
    local totalGamesLabel
    local winrateLabel
    if statsSettings.view == 'leaderAll' then
      totalGamesLabel = stats.total_games
      winrateLabel = stats.total_games > 0 and floatAsPercentage((stats.liberal_wins + stats.fascist_wins + stats.hitler_wins)/stats.total_games) or "0%"
    elseif statsSettings.view == 'leaderLib' then
      totalGamesLabel = stats.liberal_games
      winrateLabel = stats.liberal_games > 0 and floatAsPercentage((stats.liberal_wins )/stats.liberal_games) or "0%"
    elseif statsSettings.view == 'leaderFas' then
      totalGamesLabel = stats.fascist_games + stats.hitler_games
      winrateLabel = (stats.fascist_games + stats.hitler_games) > 0 and floatAsPercentage((stats.fascist_wins + stats.hitler_wins)/(stats.fascist_games + stats.hitler_games)) or "0%"
    end
    local labels = {playerLabel, totalGamesLabel, winrateLabel}

    for i=1,3 do
      self.createButton({click_function = 'nullFunc', label = labels[i], color = {0,0,0}, font_color = stringColorToRGB(COLORS[idx%10 + 1]), function_owner = self,
          position = {xVal[i], 0.2, zVal}, width = 0, height = 0, font_size = 180, scale = {0.25,0.25,0.25}})
    end
  end
end

function renderLeaderboardOffsetButtons()
  self.createButton({click_function = 'nullFunc', label = "Offset", color = {0,0,0}, font_color = stringColorToRGB("White"), function_owner = self,
      position = {1.5, 0.2, 0.9}, width = 0, height = 0, font_size = 160, scale = {0.25,0.25,0.25}})
  self.createInput({ input_function = 'handleChangeOffsetValue', function_owner = self, label = statsSettings.offset,
    alignment = 3, position = {1.5, 0.2, 1.05}, scale = {0.25,0.25,0.25}, width = 800, height = 300, font_size = 250, value = statsSettings.offset, validation = 2, tab = 1,
    })
end

function handleChangeOffsetValue(obj, playerColor, inputValue, isSelected)
  if not isSelected then
    if tonumber(inputValue) > 0 then
      statsSettings.offset = inputValue
      renderView()
    end
  end
end
